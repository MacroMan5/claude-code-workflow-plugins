name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy

      - name: Check formatting with Black
        run: |
          black --check --diff .
        continue-on-error: false

      - name: Lint with Ruff
        run: |
          ruff check .
        continue-on-error: false

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy
          # Install any additional type stubs if needed
          # pip install types-requests types-pyyaml

      - name: Type check with Mypy
        run: |
          mypy .claude/hooks/ --ignore-missing-imports
        continue-on-error: true  # Don't fail build on type errors initially

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: Run tests (if tests exist)
        run: |
          if [ -d "tests" ]; then
            pytest tests/ -v --cov=.claude --cov-report=xml --cov-report=term
          else
            echo "No tests directory found, skipping tests"
          fi
        shell: bash
        continue-on-error: true  # Don't fail if no tests yet

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false
        continue-on-error: true

  validate-hooks:
    name: Validate Hook Scripts
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate hook syntax
        run: |
          for hook in .claude/hooks/*.py; do
            echo "Validating $hook"
            python -m py_compile "$hook"
          done

      - name: Check hooks.json validity
        run: |
          python -c "import json; json.load(open('.claude/hooks/hooks.json'))"

  validate-commands:
    name: Validate Command Files
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check command files exist
        run: |
          commands=(
            "plan.md"
            "code.md"
            "review.md"
            "fix.md"
            "docs.md"
            "clean.md"
            "memory-graph.md"
            "memory-check.md"
          )

          for cmd in "${commands[@]}"; do
            if [ ! -f ".claude/commands/$cmd" ]; then
              echo "ERROR: Missing command: $cmd"
              exit 1
            else
              echo "OK: Found command: $cmd"
            fi
          done

  validate-agents:
    name: Validate Agent Files
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check agent files exist
        run: |
          agents=(
            "project-manager.md"
            "task-enhancer.md"
            "coder.md"
            "reviewer.md"
            "reviewer-story.md"
            "tester.md"
            "research.md"
            "refactor.md"
            "documentation.md"
            "cleanup.md"
          )

          for agent in "${agents[@]}"; do
            if [ ! -f ".claude/agents/$agent" ]; then
              echo "ERROR: Missing agent: $agent"
              exit 1
            else
              echo "OK: Found agent: $agent"
            fi
          done

  validate-plugin:
    name: Validate Plugin Structure
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate plugin.json
        run: |
          python3 << 'PYTHON_SCRIPT'
          import json
          with open(".claude-plugin/plugin.json") as f:
              data = json.load(f)
              assert "name" in data, "Missing name in plugin.json"
              assert "version" in data, "Missing version in plugin.json"
              assert "description" in data, "Missing description in plugin.json"
              assert data["version"] == "2.2.0", "Version mismatch in plugin.json"
              print("OK: plugin.json is valid")
          PYTHON_SCRIPT

      - name: Validate marketplace.json
        run: |
          python3 << 'PYTHON_SCRIPT'
          import json
          with open(".claude-plugin/marketplace.json") as f:
              data = json.load(f)
              assert "name" in data, "Missing name in marketplace.json"
              assert " " not in data["name"], "Marketplace name cannot contain spaces (use kebab-case)"
              assert "owner" in data, "Missing owner in marketplace.json"
              assert "plugins" in data, "Missing plugins in marketplace.json"
              assert len(data["plugins"]) > 0, "No plugins defined in marketplace.json"
              for plugin in data["plugins"]:
                  assert "source" in plugin, f"Missing source for plugin {plugin.get('name', 'unknown')}"
                  source = plugin["source"]
                  assert source == "." or source.startswith("./"), f"Plugin source must be '.' or start with './' (got: {source})"
              print("OK: marketplace.json is valid")
              print(f"  - Marketplace: {data['name']}")
              print(f"  - Owner: {data['owner']['name']}")
              print(f"  - Plugins: {len(data['plugins'])}")
          PYTHON_SCRIPT

  check-docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required root documentation
        run: |
          root_docs=(
            "README.md"
            "CHANGELOG.md"
            "CLAUDE.md"
            "CONTRIBUTING.md"
          )

          missing=0
          for doc in "${root_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "ERROR: Missing root documentation: $doc"
              missing=$((missing + 1))
            else
              echo "OK: Found root documentation: $doc"
            fi
          done

          if [ $missing -gt 0 ]; then
            exit 1
          fi

      - name: Check docs/ directory
        run: |
          docs_dir=(
            "docs/CODE_OF_CONDUCT.md"
            "docs/CREDITS.md"
            "docs/INSTALLATION.md"
            "docs/SECURITY.md"
            "docs/LICENSE"
          )

          missing=0
          for doc in "${docs_dir[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "ERROR: Missing docs file: $doc"
              missing=$((missing + 1))
            else
              echo "OK: Found docs file: $doc"
            fi
          done

          if [ $missing -gt 0 ]; then
            exit 1
          fi

      - name: Check plugin documentation
        run: |
          plugin_docs=(
            "docs/plugins/MEMORY.md"
            "docs/plugins/SUB_AGENTS.md"
            "docs/plugins/WORKFLOW.md"
          )

          missing=0
          for doc in "${plugin_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "ERROR: Missing plugin documentation: $doc"
              missing=$((missing + 1))
            else
              echo "OK: Found plugin documentation: $doc"
            fi
          done

          if [ $missing -gt 0 ]; then
            echo "ERROR: Some plugin documentation missing"
            exit 1
          else
            echo "OK: All documentation present"
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, validate-hooks, validate-commands, validate-agents, validate-plugin, check-docs]
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.lint.result }}" == "failure" ] || \
             [ "${{ needs.validate-hooks.result }}" == "failure" ] || \
             [ "${{ needs.validate-commands.result }}" == "failure" ] || \
             [ "${{ needs.validate-agents.result }}" == "failure" ] || \
             [ "${{ needs.validate-plugin.result }}" == "failure" ] || \
             [ "${{ needs.check-docs.result }}" == "failure" ]; then
            echo "ERROR: CI checks failed"
            exit 1
          else
            echo "OK: All CI checks passed"
          fi
