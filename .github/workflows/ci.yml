name: CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy

      - name: Check formatting with Black
        run: |
          black --check --diff .
        continue-on-error: false

      - name: Lint with Ruff
        run: |
          ruff check .
        continue-on-error: false

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy
          # Install any additional type stubs if needed
          # pip install types-requests types-pyyaml

      - name: Type check with Mypy
        run: |
          mypy .claude/hooks/ --ignore-missing-imports
        continue-on-error: true  # Don't fail build on type errors initially

  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12', '3.13']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Set up Node.js (for MCP Memory test)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: Test hook execution (cross-platform)
        run: |
          echo "Testing hooks can execute on ${{ matrix.os }}"
          python .claude/hooks/session_start.py 2>&1 || echo "Hook executed (JSON error expected)"
          python .claude/hooks/user_prompt_submit.py 2>&1 || echo "Hook executed (JSON error expected)"
          python .claude/hooks/post_tool_use_format.py 2>&1 || echo "Hook executed (JSON error expected)"
          echo "✅ All hooks executable on ${{ matrix.os }}"
        shell: bash

      - name: Test quality scripts (cross-platform)
        run: |
          echo "Testing quality scripts on ${{ matrix.os }}"
          python scripts/format.py --help
          python scripts/lint.py --help
          python scripts/type_check.py --help
          python scripts/test_runner.py --help
          echo "✅ All scripts work on ${{ matrix.os }}"
        shell: bash

      - name: Test MCP Memory server (cross-platform)
        run: |
          echo "Testing MCP Memory on ${{ matrix.os }}"
          timeout 5 npx -y @modelcontextprotocol/server-memory || echo "✅ MCP server works on ${{ matrix.os }}"
        shell: bash
        continue-on-error: true

      - name: Test skills structure
        run: |
          count=$(find .claude/skills -name "SKILL.md" | wc -l)
          echo "Found $count skills"
          if [ $count -lt 1 ]; then
            echo "ERROR: No skills found"
            exit 1
          fi
          echo "✅ Found $count skills on ${{ matrix.os }}"
        shell: bash

      - name: Run tests (if tests exist)
        run: |
          if [ -d "tests" ]; then
            pytest tests/ -v --cov=.claude --cov-report=xml --cov-report=term
          else
            echo "No tests directory found, skipping tests"
          fi
        shell: bash
        continue-on-error: true  # Don't fail if no tests yet

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false
        continue-on-error: true

  validate-hooks:
    name: Validate Hook Scripts
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate hook syntax
        run: |
          for hook in .claude/hooks/*.py; do
            echo "Validating $hook"
            python -m py_compile "$hook"
          done

      - name: Check hooks.json validity
        run: |
          python -c "import json; json.load(open('.claude/hooks/hooks.json'))"

  validate-commands:
    name: Validate Command Files
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check command files exist and are valid
        run: |
          if [ ! -d ".claude/commands" ]; then
            echo "ERROR: .claude/commands directory not found"
            exit 1
          fi

          count=$(ls -1 .claude/commands/*.md 2>/dev/null | wc -l)
          echo "Found $count command files"

          if [ $count -lt 1 ]; then
            echo "ERROR: No command files found"
            exit 1
          fi

          for cmd in .claude/commands/*.md; do
            if [ -f "$cmd" ]; then
              echo "✓ Found: $(basename $cmd)"
            fi
          done

          echo "✅ All $count commands validated"

  validate-agents:
    name: Validate Agent Files
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check agent files exist and are valid
        run: |
          if [ ! -d ".claude/agents" ]; then
            echo "ERROR: .claude/agents directory not found"
            exit 1
          fi

          count=$(ls -1 .claude/agents/*.md 2>/dev/null | wc -l)
          echo "Found $count agent files"

          if [ $count -lt 1 ]; then
            echo "ERROR: No agent files found"
            exit 1
          fi

          for agent in .claude/agents/*.md; do
            if [ -f "$agent" ]; then
              echo "✓ Found: $(basename $agent)"
            fi
          done

          echo "✅ All $count agents validated"

  validate-plugin:
    name: Validate Plugin Structure
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate plugin.json
        run: |
          python3 << 'PYTHON_SCRIPT'
          import json
          with open(".claude-plugin/plugin.json") as f:
              data = json.load(f)
              assert "name" in data, "Missing name in plugin.json"
              assert "version" in data, "Missing version in plugin.json"
              assert "description" in data, "Missing description in plugin.json"
              print(f"OK: plugin.json is valid (version: {data['version']})")
          PYTHON_SCRIPT

      - name: Validate marketplace.json
        run: |
          python3 << 'PYTHON_SCRIPT'
          import json
          with open(".claude-plugin/marketplace.json") as f:
              data = json.load(f)
              assert "name" in data, "Missing name in marketplace.json"
              assert "version" in data, "Missing version in marketplace.json"
              assert " " not in data["name"], "Marketplace name cannot contain spaces (use kebab-case)"
              assert "owner" in data, "Missing owner in marketplace.json"
              assert "plugins" in data, "Missing plugins in marketplace.json"
              assert len(data["plugins"]) > 0, "No plugins defined in marketplace.json"
              for plugin in data["plugins"]:
                  assert "source" in plugin, f"Missing source for plugin {plugin.get('name', 'unknown')}"
                  source = plugin["source"]
                  assert source == "." or source.startswith("./"), f"Plugin source must be '.' or start with './' (got: {source})"
              print(f"OK: marketplace.json is valid (version: {data['version']})")
              print(f"  - Marketplace: {data['name']}")
              print(f"  - Owner: {data['owner']['name']}")
              print(f"  - Plugins: {len(data['plugins'])}")
          PYTHON_SCRIPT

      - name: Cross-validate version consistency
        run: |
          python3 << 'PYTHON_SCRIPT'
          import json
          with open(".claude-plugin/plugin.json") as f:
              plugin_data = json.load(f)
          with open(".claude-plugin/marketplace.json") as f:
              marketplace_data = json.load(f)

          plugin_version = plugin_data.get("version")
          marketplace_version = marketplace_data.get("version")

          assert plugin_version == marketplace_version, \
              f"Version mismatch: plugin.json has '{plugin_version}' but marketplace.json has '{marketplace_version}'"

          print(f"✓ Version consistency check passed: {plugin_version}")
          PYTHON_SCRIPT

      - name: Cross-validate plugin.json with filesystem
        run: |
          python3 << 'PYTHON_SCRIPT'
          import json
          import os
          from pathlib import Path

          # Read plugin.json
          with open(".claude-plugin/plugin.json") as f:
              plugin_data = json.load(f)

          # Validate agents list matches filesystem
          declared_agents = plugin_data.get("agents", [])
          actual_agents = list(Path(".claude/agents").glob("*.md"))

          print(f"Plugin.json declares {len(declared_agents)} agents")
          print(f"Filesystem contains {len(actual_agents)} agent files")

          # Check all declared agents exist
          missing = []
          for agent_path in declared_agents:
              if not os.path.exists(agent_path):
                  missing.append(agent_path)

          if missing:
              print(f"❌ ERROR: plugin.json references missing agents:")
              for m in missing:
                  print(f"  - {m}")
              exit(1)

          # Validate commands directory exists
          commands_dir = plugin_data.get("commands")
          if commands_dir and not os.path.exists(commands_dir):
              print(f"❌ ERROR: plugin.json references missing commands directory: {commands_dir}")
              exit(1)

          # Validate hooks file exists
          hooks_file = plugin_data.get("hooks")
          if hooks_file and not os.path.exists(hooks_file):
              print(f"❌ ERROR: plugin.json references missing hooks file: {hooks_file}")
              exit(1)

          # Validate skills directory exists
          skills_dir = plugin_data.get("skills")
          if skills_dir and not os.path.exists(skills_dir):
              print(f"❌ ERROR: plugin.json references missing skills directory: {skills_dir}")
              exit(1)

          print("✓ All plugin.json references validated against filesystem")
          PYTHON_SCRIPT

  check-docs:
    name: Check Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required root documentation
        run: |
          # Critical files that must exist
          critical_docs=("README.md" "CLAUDE.md")

          missing=0
          for doc in "${critical_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "❌ CRITICAL: Missing $doc"
              missing=$((missing + 1))
            else
              echo "✓ Found: $doc"
            fi
          done

          if [ $missing -gt 0 ]; then
            echo "ERROR: Critical documentation missing"
            exit 1
          fi

          # Optional but recommended files
          optional_docs=("CHANGELOG.md" "CONTRIBUTING.md" "LICENSE")
          for doc in "${optional_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "⚠ Optional: Missing $doc (recommended)"
            else
              echo "✓ Found: $doc"
            fi
          done

          echo "✅ Required documentation validated"

      - name: Check docs directory structure
        run: |
          if [ ! -d "docs" ]; then
            echo "⚠ Warning: docs/ directory not found (optional)"
            exit 0
          fi

          doc_count=$(find docs -name "*.md" -type f 2>/dev/null | wc -l)
          echo "Found $doc_count documentation files in docs/"

          if [ $doc_count -gt 0 ]; then
            echo "✅ Documentation directory validated"
          else
            echo "⚠ Warning: docs/ directory exists but contains no markdown files"
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint, type-check, test, validate-hooks, validate-commands, validate-agents, validate-plugin, check-docs]
    if: always()
    steps:
      - name: Check status
        run: |
          if [ "${{ needs.lint.result }}" == "failure" ] || \
             [ "${{ needs.validate-hooks.result }}" == "failure" ] || \
             [ "${{ needs.validate-commands.result }}" == "failure" ] || \
             [ "${{ needs.validate-agents.result }}" == "failure" ] || \
             [ "${{ needs.validate-plugin.result }}" == "failure" ] || \
             [ "${{ needs.check-docs.result }}" == "failure" ]; then
            echo "ERROR: CI checks failed"
            exit 1
          else
            echo "OK: All CI checks passed"
          fi
